import streamlit as st
import pandas as pd
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–µ—Ç–µ–π", layout="centered")
st.title("üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ (–ì–†–ò–ù, –°–∞–Ω—Ç–∞ –∏ –¥—Ä.)")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –æ—Ç —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ç–µ–π ‚Äî –ø–æ–ª—É—á–∏—Ç–µ –æ–¥–∏–Ω —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç.")

def process_file(uploaded_file):
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    try:
        df = pd.read_excel(uploaded_file, header=None)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {uploaded_file.name}: {e}")
        return None

    # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å "–°–µ—Ç—å"
    header_row_idx = df[df[0] == "–°–µ—Ç—å"].index
    if len(header_row_idx) == 0:
        st.warning(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å '–°–µ—Ç—å' –≤ —Ñ–∞–π–ª–µ: {uploaded_file.name}")
        return None
    header_row_idx = header_row_idx[0]

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    df.columns = df.iloc[header_row_idx]
    df = df[header_row_idx + 1:].reset_index(drop=True)

    # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
    df.columns = [str(col).strip() for col in df.columns]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
    required_cols = ["–ê–¥—Ä–µ—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞", "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã", "–®—Ç—Ä–∏—Ö_–∫–æ–¥", "–û—Å—Ç–∞—Ç–æ–∫"]
    for col in required_cols:
        if col not in df.columns:
            st.error(f"‚ùå –í —Ñ–∞–π–ª–µ {uploaded_file.name} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü: {col}")
            return None

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    network = df["–°–µ—Ç—å"].dropna().iloc[0] if "–°–µ—Ç—å" in df.columns else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –°–ö–Æ –ö–û–î
    def get_sku(barcode):
        try:
            barcode_str = str(int(barcode))
            if len(barcode_str) >= 5:
                last_5 = barcode_str[-5:]
                return last_5[:4].zfill(4)
            else:
                return "0000"
        except:
            return "0000"

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    def get_category(name):
        if pd.isna(name) or not isinstance(name, str):
            return "–ü—Ä–æ—á–∏–µ"
        name = str(name)
        if "–ì—Ä–∏–Ω–§–∏–ª–¥" in name:
            return "Greenfield"
        elif "–¢–µ—Å—Å" in name:
            return "Tess"
        elif "–ñ–æ–∫–µ–π" in name:
            return "–ñ–æ–∫–µ–π —Ä–∞—Å—Ç–≤–æ—Ä" if "—Ä–∞—Å—Ç–≤." in name else "–ñ–æ–∫–µ–π –ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π"
        elif "–ñ–∞—Ä–¥–∏–Ω" in name:
            return "JARDIN —Ä–∞—Å—Ç–≤–æ—Ä" if "—Ä–∞—Å—Ç–≤." in name else "JARDIN –Ω–∞—Ç—É—Ä"
        elif any(x in name for x in ["–ù—É—Ä–∏", "–Ø–≤–∞", "–ö–∞–Ω–¥–∏", "–ì–∏—Ç–∞"]):
            return "–ü—Ä–∏–Ω—Ü–µ—Å—Å—ã"
        else:
            return "–ü—Ä–æ—á–∏–µ"

    # –ü—Ä–∏–º–µ–Ω—è–µ–º
    df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] = df["–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã"].apply(get_category)
    df["–°–ö–Æ –ö–û–î"] = df["–®—Ç—Ä–∏—Ö_–∫–æ–¥"].apply(get_sku)

    # –û—á–∏—Å—Ç–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –û—Å—Ç–∞—Ç–æ–∫
    def safe_to_numeric(val):
        if pd.isna(val):
            return 0
        if isinstance(val, str):
            val_clean = val.replace(",", ".").strip()
            try:
                return float(val_clean)
            except:
                return 0
        return float(val)

    df["–û—Å—Ç–∞—Ç–æ–∫"] = df["–û—Å—Ç–∞—Ç–æ–∫"].apply(safe_to_numeric)

    # –§–∏–ª—å—Ç—Ä: —Ç–æ–ª—å–∫–æ –≥–¥–µ –û—Å—Ç–∞—Ç–æ–∫ > 0
    df_filtered = df[df["–û—Å—Ç–∞—Ç–æ–∫"] > 0].copy()

    if df_filtered.empty:
        return None

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è —Å–µ—Ç–∏
    df_filtered["–°–µ—Ç—å"] = network

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞: –ê–¥—Ä–µ—Å + –ö–∞—Ç–µ–≥–æ—Ä–∏—è ‚Üí —Å–ø–∏—Å–æ–∫ –°–ö–Æ –ö–û–î–û–í
    pivot = df_filtered.groupby(
        ["–°–µ—Ç—å", "–ê–¥—Ä–µ—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"], as_index=False
    )["–°–ö–Æ –ö–û–î"].apply(lambda x: ", ".join(x)).rename(columns={"–°–ö–Æ –ö–û–î": "–°–ö–Æ –ö–û–î–´"})

    return pivot

# === –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ===
uploaded_files = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –æ—Ç —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ç–µ–π",
    type=["xls", "xlsx"],
    accept_multiple_files=True
)

if uploaded_files:
    with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤..."):
        all_data = []

        for file in uploaded_files:
            st.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞: {file.name}")
            result = process_file(file)
            if result is not None:
                all_data.append(result)

        if not all_data:
            st.warning("‚ùå –ù–∏ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏ —Å –æ—Å—Ç–∞—Ç–∫–æ–º > 0.")
        else:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            final_df = pd.concat(all_data, ignore_index=True)

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –ø–æ –°–µ—Ç–∏, –ø–æ—Ç–æ–º –ø–æ –ê–¥—Ä–µ—Å—É
            final_df = final_df.sort_values(by=["–°–µ—Ç—å", "–ê–¥—Ä–µ—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞"]).reset_index(drop=True)

            st.success("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
            st.dataframe(final_df, use_container_width=True)

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            output = io.BytesIO()
            with pd.ExcelWriter(output, engine="openpyxl") as writer:
                final_df.to_excel(writer, index=False, sheet_name="–°–≤–æ–¥–Ω–∞—è –ø–æ —Å–µ—Ç—è–º")
            output.seek(0)

            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –æ–±—â–∏–π —Å–≤–æ–¥–Ω—ã–π —Ñ–∞–π–ª (Excel)",
                data=output,
                file_name="–°–≤–æ–¥–Ω–∞—è_–ø–æ_–≤—Å–µ–º_—Å–µ—Ç—è–º.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
else:
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤.")
